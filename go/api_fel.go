/*
 * Datamonkey API
 *
 * Datamonkey is a free public server for comparative analysis of sequence alignments using state-of-the-art statistical models. <br> This is the OpenAPI definition for the Datamonkey API.
 *
 * API version: 1.0.0
 * Contact: spond@temple.edu
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"bufio"
	"crypto/sha256"
	"encoding/json"
	"fmt"
	"net/http"
	"os"
	"os/exec"
	"strings"

	"github.com/gin-gonic/gin"
)

type FELAPI struct {
}

// Post /api/v1/methods/fel-result
// Get a FEL job result
func (api *FELAPI) GetFELJob(c *gin.Context) {
	jobId := c.Param("jobId")
	if jobId == "" {
		c.JSON(400, gin.H{"error": "No job ID provided"})
		return
	}

	jobTrackerPath := "/data/uploads/job_tracker.tab"
	jobTrackerFile, err := os.Open(jobTrackerPath)
	if err != nil {
		c.JSON(500, gin.H{"error": "Failed to open job tracker file"})
		return
	}
	defer jobTrackerFile.Close()

	scanner := bufio.NewScanner(jobTrackerFile)
	for scanner.Scan() {
		if scanner.Text() == jobId {
			job := FelRequest{}
			err := c.BindJSON(&job)
			if err != nil {
				c.JSON(400, gin.H{"error": "Failed to parse job configuration"})
				return
			}
			outputFilePath := fmt.Sprintf("/data/uploads/%s_%s_results.json", job.Alignment, jobId)
			outputFile, err := os.Open(outputFilePath)
			if err != nil {
				c.JSON(500, gin.H{"error": "Failed to open output file"})
				return
			}

			c.JSON(200, gin.H{"results": outputFile})
			return
		}
	}
	c.JSON(500, gin.H{"error": "Job ID not found"})
}

// TODO: location of file uploads should be env var

// Post /api/v1/methods/fel-start
// Start and monitor a FEL job
func (api *FELAPI) StartFELJob(c *gin.Context) {
	job := FelRequest{}
	err := c.BindJSON(&job)
	if err != nil {
		c.JSON(400, gin.H{"error": "Failed to parse job configuration"})
		return
	}

	alignmentPath := fmt.Sprintf("/data/uploads/%s", job.Alignment)
	treePath := fmt.Sprintf("/data/uploads/%s", job.Tree)

	cmd := exec.Command("hyphy", "FEL", "--alignment", alignmentPath, "--tree", treePath)
	if job.Ci {
		cmd.Args = append(cmd.Args, "--ci")
	}
	if job.Srv {
		cmd.Args = append(cmd.Args, "--srv")
	}
	if job.Resample != 0 {
		cmd.Args = append(cmd.Args, "--resample", fmt.Sprintf("%f", job.Resample))
	}
	if len(job.MultipleHits) > 0 {
		cmd.Args = append(cmd.Args, "--multiple-hits", job.MultipleHits)
	}
	if len(job.SiteMultihit) > 0 {
		cmd.Args = append(cmd.Args, "--site-multihit", job.SiteMultihit)
	}

	cmd.Args = append(cmd.Args, "--genetic-code", "Universal")

	for _, branch := range job.Branches {
		cmd.Args = append(cmd.Args, "--branch", branch)
	}

	jobID := fmt.Sprintf("%x", sha256.Sum256([]byte(strings.Join(cmd.Args, " "))))

	// check if job id already exists in job_tracker.tab
	jobTracker, err := os.Open("/data/uploads/job_tracker.tab")
	if err != nil {
		jobTracker, err = os.Create("/data/uploads/job_tracker.tab")
		if err != nil {
			c.JSON(500, gin.H{"error": "Failed to create job tracker file"})
			return
		}
	}
	defer jobTracker.Close()

	scanner := bufio.NewScanner(jobTracker)
	for scanner.Scan() {
		if scanner.Text() == jobID {
			// Get the job status from SLURM
			statusReq, err := http.NewRequest("GET", fmt.Sprintf("http://localhost:9200/slurm/status/%s", jobID), nil)
			if err != nil {
				c.JSON(500, gin.H{"error": "Failed to create status request"})
				return
			}
			statusResp, err := http.DefaultClient.Do(statusReq)
			if err != nil || statusResp.StatusCode != http.StatusOK {
				c.JSON(500, gin.H{"error": "Failed to retrieve job status"})
				return
			}
			defer statusResp.Body.Close()

			var statusResponse map[string]interface{}
			if err := json.NewDecoder(statusResp.Body).Decode(&statusResponse); err != nil {
				c.JSON(500, gin.H{"error": "Failed to parse job status response"})
				return
			}

			c.JSON(200, gin.H{"job_id": jobID, "status": statusResponse["status"]})
			return
		}
	}

	// start the job
	outputFilePath := fmt.Sprintf("/data/uploads/%s_%s_results.json", job.Alignment, jobID)
	cmd.Args = append(cmd.Args, "--output", outputFilePath)

	logFilePath := fmt.Sprintf("/data/uploads/%s_%s_log.txt", job.Alignment, jobID)
	slurmReqBody := fmt.Sprintf(`{"command": "%s", "log_file": "%s"}`, strings.Join(cmd.Args, " "), logFilePath)
	slurmReq, err := http.NewRequest("POST", "http://localhost:9200/slurm", strings.NewReader(slurmReqBody))
	if err != nil {
		c.JSON(500, gin.H{"error": "Failed to create SLURM request"})
		return
	}
	slurmReq.Header.Set("Content-Type", "application/json")
	resp, err := http.DefaultClient.Do(slurmReq)
	if err != nil || resp.StatusCode != http.StatusOK {
		c.JSON(500, gin.H{"error": "Failed to start FEL via SLURM"})
		return
	}
	defer resp.Body.Close()

	// Write job id to job_tracker.tab
	jobTracker, err = os.OpenFile("/data/uploads/job_tracker.tab", os.O_APPEND|os.O_WRONLY, 0644)
	if err != nil {
		c.JSON(500, gin.H{"error": "Failed to write to job tracker file"})
		return
	}
	defer jobTracker.Close()
	_, err = jobTracker.WriteString(fmt.Sprintf("%s\n", jobID))
	if err != nil {
		c.JSON(500, gin.H{"error": "Failed to write to job tracker file"})
		return
	}

	c.JSON(200, gin.H{"job_id": jobID, "status": "submitted"})
}
