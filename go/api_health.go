/*
 * Datamonkey API
 *
 * Datamonkey is a free public server for comparative analysis of sequence alignments using state-of-the-art statistical models. <br> This is the OpenAPI definition for the Datamonkey API.
 *
 * API version: 1.0.0
 * Contact: spond@temple.edu
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"log"
	"net/http"

	"github.com/gin-gonic/gin"
)

type HealthAPI struct {
}

// TODO: port should be configurable, in the go app, dockerfile, docker-compose, etc via environment variables

// Get /api/v1/health
// Check health of Datamonkey
func (api *HealthAPI) GetHealth(c *gin.Context) {
	log.Println("Checking health of Datamonkey")

	auth_token := c.GetHeader("X-SLURM-USER-TOKEN")
	if auth_token == "" {
		log.Println("Error during health check:", "X-SLURM-USER-TOKEN header not present")
		c.JSON(500, gin.H{"status": "unhealthy", "details": gin.H{"slurm": "unhealthy"}})
		return
	}

	client := &http.Client{}
	req, err := http.NewRequest("GET", "http://c2:9200/openapi/v3", nil)
	if err != nil {
		log.Println("Error during health check:", err)
		c.JSON(500, gin.H{"status": "unhealthy", "details": gin.H{"slurm": "unhealthy"}})
		return
	}
	req.Header.Set("X-SLURM-USER-TOKEN", auth_token)

	resp, err := client.Do(req)
	if err != nil {
		// TODO figure out why this says connection refused
		log.Println("Error connecting to slurm during health check:", err)
		c.JSON(500, gin.H{"status": "unhealthy", "details": gin.H{"slurm": "unhealthy"}})
		return
	}
	defer resp.Body.Close()
	if resp.StatusCode != 200 {
		log.Println("Error response from slurm during health check:", "Slurm returned bad status code:", resp.StatusCode)
		c.JSON(500, gin.H{"status": "unhealthy", "details": gin.H{"slurm": "unhealthy"}})
		return
	}

	log.Println("Health check passed")
	c.JSON(200, gin.H{"status": "healthy", "details": gin.H{"slurm": "healthy"}})
}
