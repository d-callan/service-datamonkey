/*
 * Datamonkey API
 *
 * Datamonkey is a free public server for comparative analysis of sequence alignments using state-of-the-art statistical models. <br> This is the OpenAPI definition for the Datamonkey API.
 *
 * API version: 1.0.0
 * Contact: spond@temple.edu
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package main

import (
	"fmt"
	"log"
	"os"
	"path/filepath"

	sw "github.com/d-callan/service-datamonkey/go"
)

// getEnvWithDefault returns environment variable value or default if not set
func getEnvWithDefault(key, defaultValue string) string {
	if value := os.Getenv(key); value != "" {
		return value
	}
	return defaultValue
}

// getEnvWithFatal returns environment variable value or exits if not set
func getEnvWithFatal(key string) string {
	value := os.Getenv(key)
	if value == "" {
		log.Fatalf("%s is not set", key)
	}
	return value
}

// initDatasetTracker initializes and returns a dataset tracker based on environment configuration
func initDatasetTracker() sw.DatasetTracker {
	trackerType := getEnvWithDefault("DATASET_TRACKER_TYPE", "FileDatasetTracker")
	trackerDir := getEnvWithDefault("DATASET_TRACKER_LOCATION", "/data/uploads")

	switch trackerType {
	case "FileDatasetTracker":
		return sw.NewFileDatasetTracker(filepath.Join(trackerDir, "datasets.json"))
	case "OtherTracker":
		log.Fatalf("OtherTracker is not implemented")
		return nil
	default:
		log.Fatalf("Unknown dataset tracker type: %s", trackerType)
		return nil
	}
}

// initJobTracker initializes and returns a job tracker based on environment configuration
func initJobTracker() sw.JobTracker {
	trackerType := getEnvWithDefault("JOB_TRACKER_TYPE", "FileJobTracker")
	trackerDir := getEnvWithDefault("JOB_TRACKER_LOCATION", "/data/uploads")

	switch trackerType {
	case "FileJobTracker":
		return sw.NewFileJobTracker(filepath.Join(trackerDir, "jobs.json"))
	case "OtherJobTracker":
		log.Fatalf("OtherJobTracker is not implemented")
		return nil
	default:
		log.Fatalf("Unknown job tracker type: %s", trackerType)
		return nil
	}
}

// initSlurmConfig initializes and returns Slurm configuration
func initSlurmConfig() sw.SlurmRestConfig {
	return sw.SlurmRestConfig{
		BaseURL:   getEnvWithFatal("SLURM_REST_URL"),
		APIPath:   getEnvWithFatal("SLURM_REST_API_PATH"),
		QueueName: getEnvWithFatal("SLURM_QUEUE_NAME"),
		AuthToken: getEnvWithFatal("SLURM_AUTH_TOKEN"),
	}
}

// initScheduler initializes and returns a scheduler based on environment configuration
func initScheduler(jobTracker sw.JobTracker) sw.SchedulerInterface {
	schedulerType := getEnvWithDefault("SCHEDULER_TYPE", "SlurmRestScheduler")

	switch schedulerType {
	case "SlurmRestScheduler":
		config := initSlurmConfig()
		return sw.NewSlurmRestScheduler(config, jobTracker)
	default:
		log.Fatalf("Unknown scheduler type: %s", schedulerType)
		return nil
	}
}

// initAPIHandlers initializes the API handlers with the given components
func initAPIHandlers(scheduler sw.SchedulerInterface, datasetTracker sw.DatasetTracker, dataDir string) sw.ApiHandleFunctions {
	return sw.ApiHandleFunctions{
		FELAPI:             *sw.NewFELAPI("", "", scheduler, dataDir),
		BUSTEDAPI:          *sw.NewBUSTEDAPI("", "", scheduler, dataDir),
		FileUploadAndQCAPI: *sw.NewFileUploadAndQCAPI(datasetTracker),
		HealthAPI:          sw.HealthAPI{Scheduler: scheduler},
	}
}

func main() {
	// Initialize components
	datasetTracker := initDatasetTracker()
	jobTracker := initJobTracker()
	scheduler := initScheduler(jobTracker)
	dataDir := getEnvWithDefault("DATASET_TRACKER_LOCATION", "/data/uploads")

	// Initialize API handlers
	routes := initAPIHandlers(scheduler, datasetTracker, dataDir)

	// Start server
	port := getEnvWithDefault("SERVICE_DATAMONKEY_PORT", "9300")
	log.Printf("Server starting on port %s", port)
	if err := sw.NewRouter(routes).Run(fmt.Sprintf(":%s", port)); err != nil {
		log.Fatalf("Server error: %v", err)
	}
}
